/*
** ###################################################################
**     Processor:           S32K146 with 128 KB SRAM
**     Compiler:            Windriver Diab Compiler
**
**     Abstract:
**         Linker file for the Windriver Diab Compiler
**
**     Copyright (c) 2015-2016 Freescale Semiconductor, Inc.
**     Copyright 2017 NXP
**     All rights reserved.
**
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
** ###################################################################
*/

HEAP_SIZE  = 0x00000400;
STACK_SIZE = 0x00000400;
M_VECTOR_RAM_SIZE = 0x0400;

/* Specify the memory areas */
MEMORY
{
  /* Flash */
  m_interrupts          (RX)  : ORIGIN = 0x00000000, LENGTH = 0x00000400
  m_flash_config        (RX)  : ORIGIN = 0x00000400, LENGTH = 0x00000010
  m_text                (RX)  : ORIGIN = 0x00000410, LENGTH = 0x000FFBF0

  /* SRAM_L */
  m_data                (RW)  : ORIGIN = 0x1FFF0000, LENGTH = 0x00010000

  /* SRAM_U */
  m_data_2              (RW)  : ORIGIN = 0x20000000, LENGTH = 0x0000F000
}

/* Define output sections */
SECTIONS
{
    GROUP : {
        .interrupts : {
            __interrupts_start__ = .;
            KEEP(*(.isr_vector))
            __interrupts_end__ = .;
        }
    } > m_interrupts

    GROUP : {
        .flash_config : { KEEP(*(.FlashConfig)) }
    } > m_flash_config

    /* Collect all code sections from all input files to make a single output
     * .text section and locate it in "m_text" memory */
    GROUP : {
        .text : { *(.text) *(.rodata) *(.init) *(.fini) }
        .ctors (=TEXT) ALIGN(4):{ ctordtor.o(.ctors) *(.ctors) }
        .dtors (=TEXT) ALIGN(4):{ ctordtor.o(.dtors) *(.dtors) }
        __DATA_ROM = .;
    } > m_text

    GROUP : {
        /* With the COPYTABLE specification on the GROUP,
         * .data and .sdata sections are placed at the
         * .text2 section in "m_text" (the "physical" address) but will
         * be at the beginning of "m_data" (the "logical" address) at run
         * time. The linker links for "logical" address in "m_data".
         * .sbss and .bss do not occupy any space in "m_text" and
         * they are linked for "logical" address in "m_data".
         */

        .interrupts_ram :
        {
            . = ALIGN(4);
            __VECTOR_RAM__ = .;
            KEEP(*(.m_interrupts_ram))     /* This is a user defined section */
            . += M_VECTOR_RAM_SIZE;
            . = ALIGN(4);
        }

        .data (DATA) LOAD (__DATA_ROM):
                {
                . = ALIGN(4);
                __data_start__ = .;
                *(.data) *(.sdata) *(.j_pdata)
                . = ALIGN(4);
                __data_end__ = .;
                __DATA_END = __DATA_ROM + (__data_end__ - __data_start__);
                }

        __CODE_ROM = __DATA_END; /* Symbol is used by code initialization. */
        .code (TEXT) LOAD (__CODE_ROM):
              {
               . = ALIGN(4);
               __CODE_RAM = .;
               __code_ram_start__ = .;
               __code_start__ = .;      /* Create a global symbol at code start. */
               *(.code_ram)           /* Custom section for storing code in RAM */
               __code_ram_end__ = .;
               . = ALIGN(4);
               __code_end__ = .;        /* Define a global symbol at code end. */
               }
        __CODE_END = __CODE_ROM + (__code_end__ - __code_start__);
    } > m_data

    GROUP : {
        __CUSTOM_ROM = __CODE_END;
        /* Custom Section Block that can be used to place data at absolute address. */
        /* Use #pragma section to place data here. */
        .customSectionBlock LOAD (__CUSTOM_ROM):
        {
            __customSection_start__ = .;
            KEEP(*(.customSection))  /* Keep section even if not referenced. */
            __customSection_end__ = .;
        }
        __CUSTOM_END = __CUSTOM_ROM + (__customSection_end__ - __customSection_start__);

        /* Allocate uninitialized sections.                         */
         __BSS_START = .;
         __bss_start__ = .;
        .sbss (BSS) : {}
        .bss (BSS) : {}
        __bss_end__ = .;
        __BSS_END = .;

        /* Any remaining space will be used as a heap.              */

        __HEAP_START = .;
    } > m_data_2

    __StackTop   = ADDR(m_data_2) + SIZEOF(m_data_2);

    __VECTOR_TABLE = ADDR(m_interrupts);
    __RAM_START = ADDR(m_data);
    __DATA_RAM = ADDR(m_data) + M_VECTOR_RAM_SIZE;
    __VECTOR_RAM = ADDR(m_data);
    __RAM_VECTOR_TABLE_SIZE = M_VECTOR_RAM_SIZE;
    __RAM_END = __StackTop;
}


